plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.javamodularity.moduleplugin'
}

ext {
    moduleName = 'co.paralleluniverse.quasar.kotlin'
}

sourceCompatibility = '11'
targetCompatibility = '11'

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
            substitute module('org.jetbrains.kotlin:kotlin-stdlib-common') with module("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion")
        }
    }
}

dependencies {
    implementation project(path: ':quasar-core', configuration: 'shadowedJar')
    implementation project(':quasar-actors')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

sourceSets {
    AnnotationTest {
        compileClasspath += main.compileClasspath + main.output + test.compileClasspath + test.output
        runtimeClasspath += main.runtimeClasspath + test.runtimeClasspath
    }
}

configurations {
    AnnotationTestImplementation.extendsFrom implementation
    AnnotationTestRuntimeOnly.extendsFrom runtimeOnly
}

def annotationTest = tasks.register('annotationTest', Test) {
    description = 'Custom Annotation Tests'
    group = 'verification'

    testClassesDirs = sourceSets.AnnotationTest.output.classesDirs
    classpath = sourceSets.AnnotationTest.runtimeClasspath
    shouldRunAfter tasks.named('test')

    jvmArgs = jvmArgs.findAll {!it.contains("javaagent")}
    jvmArgs "-javaagent:${quasarJar}=a(SUSPENDABLE=co.paralleluniverse.kotlin.fibers.MySuspendable,co.paralleluniverse.kotlin.fibers.DennisSuspendable)"
}

tasks.named('check') {
    dependsOn annotationTest
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '11'
        apiVersion = '1.4'
        languageVersion = '1.4'
        // We should enable this, but are currently blocked by a Kotlin bug!
        // See https://youtrack.jetbrains.com/issue/KT-46253
        //freeCompilerArgs = ['-Xjvm-default=all']
    }
}

classes {
    doLast {
        scanAndInstrument(sourceSets.main, [configurations.provided, configurations.runtimeClasspath])
    }
}
